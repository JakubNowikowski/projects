using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Windows.Forms.DataVisualization.Charting;
using System.Globalization;
using System.IO;

namespace WindowsFormsApplication2
{
    public partial class Charts : Form
    {

        public Charts(string ilosc, string chartNameSeries, DataGridView dataGridView, int columnIndex, double mediumValue, double devValue)
        {

            InitializeComponent();

            iloscPomiarowLabel.Text = ilosc;

            List<string> chartList = new List<string>();
            foreach (DataGridViewRow item in dataGridView.Rows)
            {
                if (item.Cells.Count >= 2 && item.Cells[0].Value != null) 
                {
                    chartList.Add(item.Cells[columnIndex].Value.ToString());
                }
            }

            nameLabel.Text = chartNameSeries + ":";
            valueLabel.Text = mediumValue.ToString();
            nameDevLabel.Text = chartNameSeries + "DEV" + ":";
            valueDevLabel.Text = devValue.ToString();
           

            chart1.Series[0].LegendText = chartNameSeries;

            foreach (var series in chart1.Series)
            {
                series.Points.Clear();
            }

            List<double> chartListToDouble = chartList.Select(x => double.Parse(x)).ToList();

            foreach (double item in chartListToDouble)
            {
                chart1.Series[0].Points.AddY(item);
            }
            
            chart1.ChartAreas[0].RecalculateAxesScale();

            chart1.Series[0].MarkerSize = 10;
            
            chartListToDouble.Sort();


            try
            {

                double max = chartListToDouble[chartListToDouble.Count - 1];
                

                if (max > mediumValue + devValue)
                    chart1.ChartAreas[0].AxisY.Maximum = max;
                else
                    chart1.ChartAreas[0].AxisY.Maximum = mediumValue + 2 * devValue;

                if (max < mediumValue - devValue)
                    chart1.ChartAreas[0].AxisY.Minimum = max - 0.05 * mediumValue;
                else
                    chart1.ChartAreas[0].AxisY.Minimum = mediumValue - 2 * devValue;



                StripLine striplineMax = new StripLine();
                striplineMax.Interval = 0;

                striplineMax.IntervalOffset = mediumValue + devValue;
                striplineMax.StripWidth = 0.01 * devValue;
                striplineMax.BackColor = Color.Red;
                chart1.ChartAreas[0].AxisY.StripLines.Add(striplineMax);

                StripLine striplineMin = new StripLine();
                striplineMin.Interval = 0;
                striplineMin.IntervalOffset = mediumValue - devValue;
                striplineMin.StripWidth = 0.01 * devValue;
                striplineMin.BackColor = Color.Red;
                chart1.ChartAreas[0].AxisY.StripLines.Add(striplineMin);

                StripLine striplineMedium = new StripLine();
                striplineMedium.Interval = 0;
                striplineMedium.IntervalOffset = mediumValue;
                striplineMedium.StripWidth = 0.01 * devValue;
                striplineMedium.BackColor = Color.Green;
                chart1.ChartAreas[0].AxisY.StripLines.Add(striplineMedium);
                
            }
            catch
            {
            }


            chart1.ChartAreas[0].CursorY.IsUserSelectionEnabled = true;
            chart1.ChartAreas[0].AxisY.ScaleView.Zoomable = true;
            chart1.ChartAreas[0].CursorY.AutoScroll = true;
        }

        protected override bool ProcessDialogKey(Keys keyData)
        {
            if (Form.ModifierKeys == Keys.None && keyData == Keys.Escape)
            {
                this.Close();
                return true;
            }
            return base.ProcessDialogKey(keyData);
        }


    }
}
