using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Windows.Forms.DataVisualization.Charting;
using System.Globalization;
using System.IO;

namespace WindowsFormsApplication2
{
    class Loaddb
    {
        
        public string LoadDataByModule(string commmand, string module, string from, string to )
        {
            commmand = "SELECT * FROM FLASHCALIB_RESULTS WHERE MODULE_SN='";

            commmand += module + "' ";
            
            commmand += "AND DATETIME BETWEEN '";

            commmand += from + "' " + "AND '";

            commmand += to + "' " + ";";

            return commmand;
        }
        
        public string LoadDataByTester(string commmand, string module, string tester, string from, string to)
        {
            commmand = "SELECT * FROM FLASHCALIB_RESULTS WHERE MODULE_SN='";

            commmand += module + "' ";

            commmand += "AND TESTER='";

            commmand += tester + "'";

            commmand += "AND DATETIME BETWEEN '";

            commmand += from + "' " + "AND '";

            commmand += to + "' AND RESULT= 'P' " + ";";

            return commmand;
        }

        public void AddDataToGridView_FLASHCALIB_DATA(string cmd, DataGridView dataGridView, SqlConnection con)
        {
            try
            {
                SqlCommand command = new SqlCommand(cmd, con);
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    dataGridView.Rows.Clear();

                    while (reader.Read())
                    {

                        dataGridView.Rows.Add
                            (
                                reader[0], reader[1], reader[2],
                                reader[3], reader[4], reader[5],
                                reader[6], reader[7], reader[8],
                                reader[9], reader[10], reader[11],
                                reader[12], reader[13], reader[14],
                                reader[15], reader[16], reader[17]

                            );

                    }
                }
            }
            catch (SqlException sqlEx)
            {
                MessageBox.Show(sqlEx.ToString(), "Communicate", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
            }
        }

        public void AddDataToGridView_FLASHCALIB_RESULT(string cmd, DataGridView dataGridView, SqlConnection con)
        {
            try
            {
                SqlCommand command = new SqlCommand(cmd, con);
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    dataGridView.Rows.Clear();

                    while (reader.Read())
                    {

                        dataGridView.Rows.Add
                            (
                                reader[0], reader[1], reader[2],
                                reader[3], reader[4], reader[5],
                                reader[6], reader[7], reader[8],
                                reader[9], reader[10], reader[11],
                                reader[12]

                            );

                    }
                }
            }
            catch (SqlException sqlEx)
            {
                MessageBox.Show(sqlEx.ToString(), "Communicate", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
            }
        }

        public void CreateChart(DataGridView dataGridView, Chart chartName, int columnIndex, double mediumValue, double devValue)
        {

            chartName.ChartAreas[0].AxisY.ScaleView.ZoomReset(0);

            List<string> chartList = new List<string>();
            foreach (DataGridViewRow item in dataGridView.Rows)
            {
                if (item.Cells.Count >= 2 && item.Cells[0].Value != null) 
                {
                    chartList.Add(item.Cells[columnIndex].Value.ToString());                   
                }
            }
            
            
            foreach (var series in chartName.Series)
            {
                series.Points.Clear();
            }

            List<double> chartListToDouble = chartList.Select(x => double.Parse(x)).ToList();

            foreach (double item in chartListToDouble)
            {
                chartName.Series[0].Points.AddY(item);
            }


            chartName.ChartAreas[0].RecalculateAxesScale();

            chartListToDouble.Sort();

            // MIN MAX VALUE

            try
            {
                double max = chartListToDouble[chartListToDouble.Count-1];

                if (max > mediumValue + devValue)
                    chartName.ChartAreas[0].AxisY.Maximum = max;
                else
                    chartName.ChartAreas[0].AxisY.Maximum = mediumValue + 2 * devValue;

                if (max < mediumValue - devValue)
                    chartName.ChartAreas[0].AxisY.Minimum = max - 0.05 * mediumValue;
                else
                    chartName.ChartAreas[0].AxisY.Minimum = mediumValue - 2 * devValue;

                // STRIPLINES

                StripLine striplineMax = new StripLine();
                striplineMax.Interval = 0;
                          
                striplineMax.IntervalOffset = mediumValue + devValue;
                striplineMax.StripWidth = 0.05 * devValue;
                striplineMax.BackColor = Color.Red;
                chartName.ChartAreas[0].AxisY.StripLines.Add(striplineMax);

                StripLine striplineMin = new StripLine();
                striplineMin.Interval = 0;
                striplineMin.IntervalOffset = mediumValue - devValue;
                striplineMin.StripWidth = 0.05 * devValue;
                striplineMin.BackColor = Color.Red;
                chartName.ChartAreas[0].AxisY.StripLines.Add(striplineMin);

                StripLine striplineMedium = new StripLine();
                striplineMedium.Interval = 0;
                striplineMedium.IntervalOffset = mediumValue;
                striplineMedium.StripWidth = 0.05 * devValue;
                striplineMedium.BackColor = Color.Green;
                chartName.ChartAreas[0].AxisY.StripLines.Add(striplineMedium);

            }
            catch
            { }
            
        }
             
    }
}
